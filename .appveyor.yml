#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 0.1.{build}-{branch}

# branches to build  
branches:
  only:
  - master
  - newcore

# Do not build on tags (GitHub and BitBucket)
skip_tags: true

# Build worker image (VM template)
image:
 - Visual Studio 2017

init:
- ps: $Env:LABEL = "CI" + $Env:APPVEYOR_BUILD_NUMBER.PadLeft(5, "0")

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build Configuration, i.e. Debug, Release, etc.
configuration:
 - Debug
 - Release

# build platform, i.e. x86, x64, Any CPU. This setting is optional
platform:
  # - Any CPU
  # - x86
  - x64

# build:
#   project: MyExpenses.sln         # path to Visual Studio solution or project
#   parallel: true                  # enable MSBuild parallel builds
#   publish_wap: true               # package Web Application Projects (WAP) for Web Deploy
#   publish_wap_xcopy: true         # package Web Application Projects (WAP) for XCopy deployment
#   publish_azure: true             # package Azure Cloud Service projects and push to artifacts
#   publish_nuget: true             # package projects with .nuspec files and push to artifacts
#   publish_nuget_symbols: true     # generate and publish NuGet symbol packages
#   include_nuget_references: true  # add -IncludeReferencedProjects option while packaging NuGet artifacts
#   verbosity: minimal              # MSBuild verbosity level

build_script:
- dotnet build "Util" -c %CONFIGURATION% --no-dependencies --version-suffix %LABEL%
- dotnet build "Domain" -c %CONFIGURATION% --no-dependencies --version-suffix %LABEL%
- dotnet build "Infrastructure" -c %CONFIGURATION% --no-dependencies --version-suffix %LABEL%
- dotnet build "Application" -c %CONFIGURATION% --no-dependencies --version-suffix %LABEL%
- dotnet build "Presentation/WebApplicationMVC" -c %CONFIGURATION% --no-dependencies --version-suffix %LABEL%

- dotnet build "Application/Test" -c %CONFIGURATION% --no-dependencies --version-suffix %LABEL%

before_build:
 - nuget restore
 - appveyor-retry dotnet restore -v Minimal

after_build:
#  - dotnet pack "Presentation/WebApplicationMVC" -c %CONFIGURATION% --no-build --version-suffix %LABEL% -o artifacts
 - dotnet pack "Util" -c %CONFIGURATION% --no-build --version-suffix %LABEL% -o artifacts
 - dotnet pack "Domain" -c %CONFIGURATION% --no-build --version-suffix %LABEL% -o artifacts
 - dotnet pack "Infrastructure" -c %CONFIGURATION% --no-build --version-suffix %LABEL% -o artifacts
 - dotnet pack "Application" -c %CONFIGURATION% --no-build --version-suffix %LABEL% -o artifacts
 - dotnet pack "Application/Test" -c %CONFIGURATION% --no-build --version-suffix %LABEL% -o artifacts

# artifacts:
# - path: artifacts\**\*.*

cache:
- '%USERPROFILE%\.nuget\packages'

#---------------------------------#
#    environment configuration    #
#---------------------------------#
  
# environment variables
environment:
  CODACY_PROJECT_TOKEN: 909dd767787943658cde4290d6d68ee5

# Automatically register private account and/or project AppVeyor NuGet feeds.
nuget:
  account_feed: true
  project_feed: true

#---------------------------------#
#         notifications           #
#---------------------------------#

notifications:

# Email
- provider: Email
  to:
  - lfmachadodasilva@gmail.com
  on_build_success: false
  on_build_failure: true
  on_build_status_changed: true

#---------------------------------#
#       tests configuration       #
#---------------------------------#

test:
  # only assemblies to test
  assemblies:
    - '**\*Test.dll'

# to run your custom scripts instead of automatic tests
# test_script:
#  - .\packages\OpenCover.4.6.519\tools\OpenCover.Console.exe -register:user -target:".\packages\NUnit.ConsoleRunner.3.7.0\tools\nunit3-console.exe" -targetargs:"Tests\MyExpenses.Application.Tests\bin\$(configuration)\netcoreapp2.0\MyExpenses.Application.Tests.dll" -output:"TestResult.xml"

# # scripts to run before tests
# before_test:
#  - "SET PATH=C:\\Python34;C:\\Python34\\Scripts;%PATH%"
#  - pip install codecov
#  - pip install git+git://github.com/codecov/codecov-python.git

# # scripts to run after tests
# after_test:
#  - codecov -f "TestResult.xml" -t 81c4ac46-b5bc-4d0d-8c4f-4de04812e6e3 -X gcov